CREATE TABLE T_CUSTOMERS
(
  IdCustomer INT NOT NULL,
  FirstName VARCHAR2(20) NOT NULL,
  LastName VARCHAR2(40) NOT NULL,
  
  CONSTRAINT PK_CUSTOMER PRIMARY KEY(IdCustomer)
)
TABLESPACE BOOKSTOREBIG;

CREATE TABLE T_GENRES
(
  IdGenre INT NOT NULL,
  Genre VARCHAR2(20) NOT NULL,
  
  CONSTRAINT PK_GENRE PRIMARY KEY(IdGenre),
  CONSTRAINT UQ_GENRE UNIQUE(Genre)
)
TABLESPACE BOOKSTOREBIG;

CREATE TABLE T_CUSTOMERS_GENRES
(
  IdCustomer INT NOT NULL,
  IdGenre INT NOT NULL,
  
  CONSTRAINT PK_CUSTOMER_GENRE PRIMARY KEY (IdCustomer, IdGenre),
  CONSTRAINT FK_CUSTOMER FOREIGN KEY (IdCustomer) 
    REFERENCES T_CUSTOMERS(IdCustomer)
    ON DELETE CASCADE,
  CONSTRAINT FK_GENRE FOREIGN KEY (IdGenre)
    REFERENCES T_GENRES(IdGenre)
    ON DELETE CASCADE
)
TABLESPACE BOOKSTOREBIG;


-- sequence for customers table

CREATE SEQUENCE sqCustomers
START WITH 1 INCREMENT BY 1 NOCYCLE CACHE 99;

-- stored procs: new_customer and new_preference



--

create or replace
PACKAGE PKG_BOOKSTORE AS
  TYPE CURSOR_ALL IS REF CURSOR;
  PROCEDURE P_SELECT_GENRES;
  PROCEDURE NEW_CUSTOMER;
  PROCEDURE NEW_PREFERENCE;
END;

-- 

create or replace
PROCEDURE P_SELECT_GENRES
  (RES OUT PKG_BOOKSTORE.CURSOR_ALL)
IS
BEGIN

  OPEN RES FOR SELECT IdGenre, Genre FROM T_GENRES;
  
  RETURN;

END P_SELECT_GENRES;

--

create or replace
PROCEDURE NEW_CUSTOMER
  (v_FirstName IN T_CUSTOMERS.FirstName%TYPE, v_LastName IN T_CUSTOMERS.LastName%TYPE,
   v_IdCustomer OUT T_CUSTOMERS.IdCustomer%TYPE)
IS BEGIN

  SELECT sqCustomers.NextVal INTO v_IdCustomer FROM DUAL;
  
  INSERT INTO T_CUSTOMERS VALUES (v_IdCustomer, v_FirstName, v_LastName);
  EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      RAISE_APPLICATION_ERROR(SQLCODE, 'Cannot insert duplicate value - ' + SQLERRM);
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);

END NEW_CUSTOMER;

-- 

create or replace
PROCEDURE NEW_PREFERENCE
  (v_IdCustomer IN T_CUSTOMERS.IdCustomer%TYPE, v_IdGenre IN T_GENRES.IdGenre%TYPE)
IS BEGIN

  INSERT INTO T_CUSTOMERS_GENRES VALUES (v_IdCustomer, v_IdGenre);

  EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      RAISE_APPLICATION_ERROR(SQLCODE, 'Cannot insert duplicate value - ' + SQLERRM);
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
      
END NEW_PREFERENCE;


